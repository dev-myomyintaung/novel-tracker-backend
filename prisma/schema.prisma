generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReadingStatus {
  READING
  COMPLETED
  WISHLIST
  DROPPED
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  email     String  @unique
  password  String
  image     String?
  isAdmin   Boolean @default(false) @map("is_admin")

  novels Novel[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  tags      Tag[]     @relation("CreatedBy")
  accounts  Account[]
  Rating    Rating[]

  @@map("users")
}

model Account {
  id                Int      @id @default(autoincrement())
  provider          String
  providerAccountId String   @map("provider_account_id")
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  user              User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId            Int      @map("user_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Novel {
  id             Int           @id @default(autoincrement())
  title          String
  author         String?
  sourceUrl      String?       @map("source_url")
  coverImageUrl  String?       @map("cover_url")
  status         ReadingStatus
  currentChapter Int           @default(1) @map("current_chapter")
  totalChapters  Int?          @map("total_chapters")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  notes  Note[]
  tags   NovelTag[]
  genres NovelGenre[]
  rating Rating[]

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?

  @@index([userId])
  @@map("novels")
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  novel   Novel @relation(references: [id], fields: [novelId], onDelete: Cascade)
  novelId Int   @map("novel_id")

  @@index([novelId])
  @@map("notes")
}

model Tag {
  id              Int      @id @default(autoincrement())
  tagName         String   @unique
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUser   User?    @relation("CreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId Int?     @map("created_by_id")

  novels NovelTag[]

  @@map("tags")
}

model NovelTag {
  id      Int   @id @default(autoincrement())
  novel   Novel @relation(references: [id], fields: [novelId], onDelete: Cascade)
  novelId Int   @map("novel_id")
  tag     Tag   @relation(references: [id], fields: [tagId], onDelete: Cascade)
  tagId   Int   @map("tag_id")

  @@unique([novelId, tagId])
  @@index([tagId])
  @@map("novel_tags")
}

model Genre {
  id        Int      @id @default(autoincrement())
  genreName String   @unique @map("genre_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  novels NovelGenre[]

  @@map("genres")
}

model NovelGenre {
  id      Int   @id @default(autoincrement())
  novel   Novel @relation(references: [id], fields: [novelId], onDelete: Cascade)
  novelId Int   @map("novel_id")
  genre   Genre @relation(references: [id], fields: [genreId], onDelete: Cascade)
  genreId Int   @map("genre_id")

  @@unique([novelId, genreId])
  @@index([genreId])
  @@map("novel_genres")
}

model Rating {
  id        Int      @id @default(autoincrement())
  score     Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  novel   Novel @relation(references: [id], fields: [novelId])
  novelId Int   @map("novel_id")
  user    User  @relation(references: [id], fields: [userId])
  userId  Int   @map("user_id")

  @@unique([userId, novelId])
  @@index([novelId])
  @@map("rating")
}
